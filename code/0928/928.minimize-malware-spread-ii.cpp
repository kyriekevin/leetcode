// @leet start
class Solution {
public:
  vector<int> p, sz;

  int find(int x) {
    if (p[x] != x)
      p[x] = find(p[x]);
    return p[x];
  }

  int minMalwareSpread(vector<vector<int>> &graph, vector<int> &initial) {
    int n = graph.size();
    p.resize(n);
    sz.resize(n);

    for (int i = 0; i < n; i++)
      p[i] = i, sz[i] = 1;

    unordered_set<int> S(initial.begin(), initial.end());

    for (int i = 0; i < n; i++) {
      for (int j = 0; j < n; j++) {
        if (!S.count(i) && !S.count(j) && graph[i][j] == 1 &&
            find(i) != find(j)) {
          sz[find(i)] += sz[find(j)];
          p[find(j)] = find(i);
        }
      }
    }

    vector<unordered_set<int>> cnt(n);
    for (int x : initial)
      for (int i = 0; i < n; i++)
        if (!S.count(i) && graph[x][i] == 1)
          cnt[find(i)].insert(x);

    vector<int> tot(n);
    unordered_set<int> tomp;
    for (int i = 0; i < n; i++)
      if (!S.count(i))
        tomp.insert(find(i));

    for (int x : tomp)
      if (cnt[x].size() == 1)
        tot[*cnt[x].begin()] += sz[x];

    int res = initial[0];
    for (int x : initial)
      if (tot[x] > tot[res] || tot[x] == tot[res] && x < res)
        res = x;

    return res;
  }
};
// @leet end
